--- a/tools/python/xen/xm/create.py
+++ b/tools/python/xen/xm/create.py
@@ -704,37 +704,31 @@
         return None
     config_image = [ vals.builder ]
     if vals.kernel:
-        if os.path.dirname(vals.kernel) != "" and os.path.exists(vals.kernel):
-            config_image.append([ 'kernel', vals.kernel ])
-        elif vals.kernel == 'hvmloader':
+        t = auxbin.path_boot(vals.kernel)
+        if vals.kernel == 'hvmloader':
             # Keep hvmloader w/o a path and let xend find it.
             # This allows guest migration to a Dom0 having different
             # xen install pathes.
             config_image.append([ 'kernel', vals.kernel ])
-        elif os.path.exists(os.path.abspath(vals.kernel)):
-            # Keep old behaviour, if path is valid.
-            config_image.append([ 'kernel', os.path.abspath(vals.kernel) ])
+        elif t:
+            config_image.append([ 'kernel', t ])
         else:
             raise ValueError('Cannot find kernel "%s"' % vals.kernel)
     if vals.ramdisk:
-        if os.path.dirname(vals.ramdisk) != "" and os.path.exists(vals.ramdisk):
-            config_image.append([ 'ramdisk', vals.ramdisk ])
-        elif os.path.exists(os.path.abspath(vals.ramdisk)):
-            # Keep old behaviour, if path is valid.
-            config_image.append([ 'ramdisk', os.path.abspath(vals.ramdisk) ])
+        t = auxbin.path_boot(vals.ramdisk)
+        if t:
+            config_image.append([ 'ramdisk', t ])
         else:
             raise ValueError('Cannot find ramdisk "%s"' % vals.ramdisk)
     if vals.loader:
-        if os.path.dirname(vals.loader) != "" and os.path.exists(vals.loader):
-            config_image.append([ 'loader', vals.loader ])
-        elif vals.loader == 'hvmloader':
+        t = auxbin.path_boot(vals.loader)
+        if vals.loader == 'hvmloader':
             # Keep hvmloader w/o a path and let xend find it.
             # This allows guest migration to a Dom0 having different
             # xen install pathes.
             config_image.append([ 'loader', vals.loader ])
-        elif os.path.exists(os.path.abspath(vals.loader)):
-            # Keep old behaviour, if path is valid.
-            config_image.append([ 'loader', os.path.abspath(vals.loader) ])
+        elif t:
+            config_image.append([ 'loader', t ])
         else:
             raise ValueError('Cannot find loader "%s"' % vals.loader)
     if vals.cmdline_ip:
@@ -1062,7 +1056,7 @@
     args = [ 'acpi', 'apic',
              'boot',
              'cpuid', 'cpuid_check',
-             'device_model', 'display',
+             'display',
              'fda', 'fdb',
              'gfx_passthru', 'guest_os_type',
              'hap', 'hpet',
@@ -1084,6 +1078,8 @@
     for a in args:
         if a in vals.__dict__ and vals.__dict__[a] is not None:
             config_image.append([a, vals.__dict__[a]])
+    if vals.device_model:
+        config_image.append(['device_model', auxbin.path_bin(vals.device_model)])
     if vals.vncpasswd is not None:
         config_image.append(['vncpasswd', vals.vncpasswd])
 
@@ -1150,10 +1146,9 @@
 
     config_image = configure_image(vals)
     if vals.bootloader:
-        if vals.bootloader == "pygrub":
-            vals.bootloader = auxbin.pathTo(vals.bootloader)
+        t = auxbin.path_boot(vals.bootloader)
 
-        config.append(['bootloader', vals.bootloader])
+        config.append(['bootloader', t])
         if vals.bootargs:
             config.append(['bootloader_args', vals.bootargs])
         else:
