This file is quite old. I don't know if it is still having useful
information, so I am not deleting it...

But be careful, maybe this information is not correct anymore!

--Ralph Passgang

-------------------------------------------------------------------------

Xen uses a new, unreleased patch management system.  The preliminary name
for it is dbs-ng.

Features:

* Pre-applied patches.

  After extracting the source(with dpkg-source -x), all patches in
  debian/patches are already applied.  There is no need to run any
  external script, nor any target in debian/rules to produce an editable
  source tree.

* Patch dependencies.

  Patches can depend on other patches.  This is used for ordering, during
  application.  No longer do patches have to be numbered in a certain
  order(which meant any time a patch was inserted, you might have had to
  renumber others, which was painful).

* Patches have meta-data now.

  At the top of each patch, is a dpkg control paragaph.  This paragraph
  contains a description(short and long), what the prune value should be
  (default 1), the dependency list, and a set of flags(currently, whether
  the patch has already been submitted upstream(see below)).

  Additionally, a Signed-off-by field can be included, to document who has
  looked at, and modified, the patch.  This is patterned after the
  linux-kernel patch acceptance policy.

* Upstream patch submittance handled semi-automatically.

  The tool used to manage these patches has the ability to automatically
  send patches to an upstream address.  It will send one patch per email,
  and a 00-index mail, describing the patch set.

  Another command the tool does, is list patches that have not yet been
  sent upstream.  It makes use of the submitted flag(above), to know which
  patches have already been sent.  This command knows about the
  dependencies, and will only list patches that have no other depends, or
  only depend on patches already submitted.

* Modifying the source.

  Developers and regular users can modify the extracted source directly.
  When their changes are done, they produce a normal diff like any other
  package in debian.  There is no implicit need to add it to
  debian/patches.

  At some point, the dbs-ng will be released, and then patches could be
  submitted to the maintainer in split form; however, the design is such
  that this is not nescessary.

Now, for a few extra explanations about dbs-ng.

It's designed to replace dpkg-source.  It can handle, what I am calling,
v1 sources.  That is, a standard orig.tar.gz+diff.gz, or single tar.gz.

The format discussed about is probably best described as v1.5.  It is
backwards compatible with standard dpkg-source(a bonus).

V2 sources will support more advanced changes.  Binary modifications, file
renames, archives(ar/cpio/tar).  Also, I have plans to support source
build-depends.  You will be able to extract files from other source
packages with this feature.

dbs-ng does not yet support v2 format; nor, does it support edit-patch.  I
have an idea of how to do edit-patch, but haven't yet needed it myself.

There is preliminary support for xdelta patches(insofar as the tool can
be extended with different patch types, and both unified diff and xdelta
are implemented).

dbs-ng also validates each patch file, and does a test application first,
before applying.  For unified diffs, if there is any fuzz or offset, it
aborts, and doesn't apply it.

There is a config file, debian/config.dbs(name will change).  This config
current lists filenames, directories, and file paths to ignore when
diffing.  This is helpful when upstream isn't too careful about cleaning
up after themselves.  By default, the ignore regex used by dpkg-source
is always enabled.

